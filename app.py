from flask import Flask, render_template_string, request, redirect
import sqlite3
from datetime import date

app = Flask(__name__)
DB_NAME = "foodwise.db"

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é –Ω–∞ 100 –≥
PRODUCTS = {
    "—è–±–ª–æ–∫–æ": 52,
    "–±–∞–Ω–∞–Ω": 89,
    "—Ö–ª–µ–±": 265,
    "–º–æ–ª–æ–∫–æ": 42,
    "—Ä–∏—Å": 130,
    "–∫—É—Ä–∏—Ü–∞": 239
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS meals (
            id INTEGER PRIMARY KEY,
            product TEXT NOT NULL,
            grams INTEGER NOT NULL,
            calories REAL NOT NULL,
            date TEXT NOT NULL
        )''')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏
def add_meal(product, grams, calories):
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute('INSERT INTO meals (product, grams, calories, date) VALUES (?, ?, ?, ?)',
                     (product, grams, calories, str(date.today())))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
def get_today_meals():
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.execute('SELECT product, grams, calories FROM meals WHERE date = ?', (str(date.today()),))
        return cursor.fetchall()

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        product = request.form['product'].lower()
        grams = int(request.form['grams'])

        if product in PRODUCTS:
            cal_per_100g = PRODUCTS[product]
            calories = grams * cal_per_100g / 100
            add_meal(product, grams, calories)

        return redirect('/')

    meals = get_today_meals()
    total_calories = sum(row[2] for row in meals)

    if total_calories < 1200:
        tip = "–í—ã —Å—ä–µ–ª–∏ –º–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-—Ç–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–µ!"
    elif total_calories > 2500:
        tip = "–ö–∞–ª–æ—Ä–∏–π –º–Ω–æ–≥–æ–≤–∞—Ç–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å—ã."
    else:
        tip = "–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π!"

    return render_template_string(TEMPLATE, products=PRODUCTS.keys(), meals=meals, total=total_calories, tip=tip)

TEMPLATE = """
<!doctype html>
<html lang="ru">
<head>
    <meta charset="utf-8">
    <title>FoodWise</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">
<div class="container mt-5">
    <h1 class="mb-4">FoodWise ‚Äî –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é</h1>

    <form method="post" class="mb-4">
        <div class="row g-2">
            <div class="col-md-4">
                <select class="form-select" name="product" required>
                    {% for name in products %}
                        <option value="{{ name }}">{{ name.capitalize() }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-4">
                <input type="number" name="grams" class="form-control" placeholder="–ì—Ä–∞–º–º—ã" min="1" required>
            </div>
            <div class="col-md-4">
                <button class="btn btn-success w-100">–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
        </div>
    </form>

    <h4>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏:</h4>
    <ul class="list-group mb-3">
        {% for product, grams, cal in meals %}
            <li class="list-group-item">
                {{ product.capitalize() }} ‚Äî {{ grams }} –≥ ‚Üí {{ cal|round(1) }} –∫–∫–∞–ª
            </li>
        {% endfor %}
    </ul>

    {% if total < 1200 %}
        <div class="alert alert-warning">
            <strong>–ò—Ç–æ–≥–æ:</strong> {{ total|round(1) }} –∫–∫–∞–ª<br>
            ü•¶ –í—ã —Å—ä–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ. –î–æ–±–∞–≤—å—Ç–µ –±–µ–ª–∫–∏ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã.
        </div>
    {% elif total > 2500 %}
        <div class="alert alert-danger">
            <strong>–ò—Ç–æ–≥–æ:</strong> {{ total|round(1) }} –∫–∫–∞–ª<br>
            üçï –ü–µ—Ä–µ–∏–∑–±—ã—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–∫—É—Å—ã –∏ –Ω–∞–ø–∏—Ç–∫–∏.
        </div>
    {% else %}
        <div class="alert alert-success">
            <strong>–ò—Ç–æ–≥–æ:</strong> {{ total|round(1) }} –∫–∫–∞–ª<br>
            ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!
        </div>
    {% endif %}
</div>
</body>
</html>
"""

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
